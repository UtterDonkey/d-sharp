{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["/// <reference types=\"node\" />\n\nimport remapping from '@ampproject/remapping';\nimport { SKIP, walk, type ESTreeMap } from 'astray';\nimport type { Plugin } from 'esbuild';\nimport type { SourceLocation } from 'estree';\nimport MagicString from 'magic-string';\nimport { parse } from 'meriyah';\nimport { mkdir, writeFile } from 'node:fs/promises';\nimport { dirname, extname } from 'node:path';\n\ntype ESTreeMapExtra<M = ESTreeMap> = {\n  [K in keyof M]: M[K] & {\n    // Added via meriyah \"loc\" option\n    loc: SourceLocation;\n    // Added via meriyah \"ranges\" option\n    start: number;\n    end: number;\n  };\n};\n\ninterface MinifyOptions {\n  taggedOnly?: boolean;\n  keepComments?: boolean;\n}\n\n// Same encode/decode as esbuild\n// https://github.com/evanw/esbuild/blob/4dfd1b6ae07892f1e8f5a6712fc67301e19a1b24/lib/shared/stdio_protocol.ts#L353-L391\nconst encoder = new TextEncoder();\nconst decoder = new TextDecoder();\nexport const encodeUTF8 = (text: string): Uint8Array => encoder.encode(text);\nexport const decodeUTF8 = (bytes: Uint8Array): string => decoder.decode(bytes);\n\nexport function stripWhitespace(html: string, keepComments?: boolean): string {\n  let out = html\n    // reduce whitespace to a single space\n    .replace(/\\s+/gm, ' ')\n    // remove space between tags\n    .replace(/> </g, '><')\n    // remove space between edge and start/end tags\n    .replace(/^ </g, '<')\n    .replace(/> $/g, '>')\n    // remove space around stage1 \"node ref tags\"\n    // https://github.com/MaxMilton/stage1\n    .replace(/> #(\\w+) </g, '>#$1<');\n\n  if (!keepComments) {\n    out = out.replace(/<!--.*?-->/gs, '');\n  }\n\n  return out;\n}\n\nexport function minify(code: string, opts: MinifyOptions = {}): MagicString {\n  const out = new MagicString(code);\n  const ignoreLines: number[] = [];\n  const ast = parse(code, {\n    next: true,\n    loc: true,\n    ranges: true,\n    module: true,\n\n    onComment(type, value, _start, _end, loc) {\n      if (\n        type === 'MultiLine' &&\n        value.trim() === '! minify-templates-ignore'\n      ) {\n        ignoreLines.push(loc.end.line + 1);\n      }\n    },\n  });\n\n  walk<typeof ast, void, ESTreeMapExtra>(ast, {\n    TemplateLiteral(node) {\n      return ignoreLines.includes(node.loc.start.line) ||\n        (opts.taggedOnly &&\n          node.path?.parent?.type !== 'TaggedTemplateExpression')\n        ? SKIP\n        : undefined;\n    },\n    TemplateElement(node) {\n      const { start, end } = node.loc;\n\n      if (start.line !== end.line || start.column !== end.column) {\n        out.overwrite(\n          node.start,\n          node.end,\n          stripWhitespace(node.value.raw, opts.keepComments),\n        );\n      }\n    },\n  });\n\n  return out;\n}\n\nexport const minifyTemplates = (opts: MinifyOptions = {}): Plugin => ({\n  name: 'minify-templates',\n  setup(build) {\n    if (build.initialOptions.write !== false) return;\n\n    build.onEnd((result) => {\n      // eslint-disable-next-line unicorn/no-array-for-each\n      result.outputFiles?.forEach((file, fileIndex, outputFiles) => {\n        if (extname(file.path) !== '.js') return;\n\n        const src = decodeUTF8(file.contents);\n        const out = minify(src, opts);\n\n        // eslint-disable-next-line no-param-reassign\n        outputFiles[fileIndex].contents = encodeUTF8(out.toString());\n\n        const matchingMapIndex = outputFiles.findIndex(\n          (outputFile) => outputFile.path === `${file.path}.map`,\n        );\n\n        if (matchingMapIndex > -1) {\n          const mapFile = outputFiles[matchingMapIndex];\n          const remapped = remapping(\n            [\n              // our source map from minifying\n              {\n                ...out.generateDecodedMap({\n                  source: file.path,\n                  file: mapFile.path,\n                  hires: true,\n                }),\n                version: 3,\n              },\n              // esbuild generated source map\n              decodeUTF8(mapFile.contents),\n            ],\n            // don't load other source maps; referenced files are the original source\n            () => null,\n          );\n\n          // eslint-disable-next-line no-param-reassign\n          outputFiles[matchingMapIndex].contents = encodeUTF8(\n            remapped.toString(),\n          );\n        }\n      });\n    });\n  },\n});\n\nexport const writeFiles = (): Plugin => ({\n  name: 'write-files',\n  setup(build) {\n    if (build.initialOptions.write !== false) return;\n\n    build.onEnd(async (result) => {\n      if (!result.outputFiles) return;\n\n      await Promise.all(\n        result.outputFiles.map((file) =>\n          mkdir(dirname(file.path), { recursive: true }).then(() =>\n            writeFile(file.path, file.contents, 'utf8'),\n          ),\n        ),\n      );\n    });\n  },\n});\n"],
  "mappings": "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",
  "names": ["src_exports", "__export", "decodeUTF8", "encodeUTF8", "minify", "minifyTemplates", "stripWhitespace", "writeFiles", "__toCommonJS", "import_remapping", "import_astray", "import_magic_string", "import_meriyah", "import_promises", "import_node_path", "encoder", "decoder", "text", "bytes", "html", "keepComments", "out", "code", "opts", "MagicString", "ignoreLines", "ast", "type", "value", "_start", "_end", "loc", "node", "_a", "_b", "start", "end", "build", "result", "file", "fileIndex", "outputFiles", "src", "matchingMapIndex", "outputFile", "mapFile", "remapped", "remapping"]
}
